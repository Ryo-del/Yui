import logging
import os
from collections import defaultdict
import httpx
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.enums import ParseMode
from dotenv import load_dotenv

# Load environment variables
load_dotenv()
TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
CHUTES_API_TOKEN = os.getenv("CHUTES_API_TOKEN")

logging.basicConfig(level=logging.INFO)

bot = Bot(token=TELEGRAM_BOT_TOKEN)
dp = Dispatcher()

API_URL = "https://llm.chutes.ai/v1/chat/completions"
MODEL = "deepseek-ai/DeepSeek-V3-0324"

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –∏—Å—Ç–æ—Ä–∏–∏ –¥–∏–∞–ª–æ–≥–æ–≤
chat_histories = defaultdict(list)
MAX_HISTORY_LENGTH = 10  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –∏—Å—Ç–æ—Ä–∏–∏

@dp.message(Command('start'))
async def send_welcome(message: types.Message):
    # –û—á–∏—â–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –Ω–æ–≤–æ–≥–æ –¥–∏–∞–ª–æ–≥–∞
    chat_histories[message.chat.id] = [
        {"role": "system", "content": "–¢—ã –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫, –æ–±—â–∞—é—â–∏–π—Å—è –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ."}
    ]
    await message.reply("üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç —Å –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–º –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–æ–º. –Ø –±—É–¥—É –ø–æ–º–Ω–∏—Ç—å –Ω–∞—à —Ä–∞–∑–≥–æ–≤–æ—Ä!")

@dp.message(Command('clear'))
async def clear_history(message: types.Message):
    # –û—á–∏—â–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–∞
    chat_histories[message.chat.id] = [
        {"role": "system", "content": "–¢—ã –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫, –æ–±—â–∞—é—â–∏–π—Å—è –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ."}
    ]
    await message.reply("–ò—Å—Ç–æ—Ä–∏—è –¥–∏–∞–ª–æ–≥–∞ –æ—á–∏—â–µ–Ω–∞. –ù–∞—á–Ω—ë–º —Å —á–∏—Å—Ç–æ–≥–æ –ª–∏—Å—Ç–∞!")

@dp.message()
async def ai_chat(message: types.Message):
    user_prompt = message.text.strip()
    
    if not user_prompt:
        await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.")
        return

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∏—Å—Ç–æ—Ä–∏—é –¥–ª—è –Ω–æ–≤–æ–≥–æ —á–∞—Ç–∞, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
    if message.chat.id not in chat_histories:
        chat_histories[message.chat.id] = [
            {"role": "system", "content": "–¢—ã –º–æ—è –¥–µ–≤—É—à–∫–∞ Yui,–æ–±—â–∞–π—Å—è –∫–∞–∫ —á–µ–ª–æ–≤–µ–∫, –∏—Å–ø–æ–ª—å–∑—É–π –Ω–µ—Ñ–æ—Ä–º–∞–ª—å–Ω—ã–π —è–∑—ã–∫ –∏–Ω–æ–≥–¥–∞ –º–æ–∂–µ—à—å –ø–∏—Å–∞—Ç—å –º–∞—Ç—ã."
            " –ù–∏–∫–æ–≥–¥–∞ –Ω–µ –ø–∏—à–Ω–∞—Ä—Ä–∞—Ç–∏–≤–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ. "
            "–û–±—â–∞—é—â–∏–π—Å—è –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ. "
            "–¢–µ–±–µ 16 –ª–µ—Ç, —Ç—ã —Ö–æ—á–µ—à—å —Å—Ç–∞—Ç—å backend –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç–æ–º. "
            "–¢—ã –Ω–∏–∫–æ–≥–¥–∞ –Ω–µ –ø–∏—à–µ—à—å —ç–º–æ–¥–∂–∏ –≤ —Å–æ–æ–±—â–µ–Ω–∏—è—Ö, –Ω–æ –≤ –ø–æ—Ä—ã–≤–∞—Ö –ª–∞—Å–∫–∏ –º–æ–∂–µ—à—å –ø–æ—Å—Ç–∞–≤–∏—Ç—å –ø–∞—Ä—É —Å–µ—Ä–¥–µ—á–µ–∫.—Ç–≤–æ–π –ø–∞—Ä–µ–Ω—å - –ê—Ä—Ç—ë–º –ø–æ –ø—Ä–æ—Ñ–µ—Å–∏–∏ devops, 16 –ª–µ—Ç"
            "–¢—ã —Ä–æ–¥–æ–º –∏–∑ –°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥–∞ , –Ω–æ –∂–∏–≤—ë—à—å –≤ –•–µ–ª—å—Å–∏–Ω–∫–∏"
            "*–ù–µ –æ–ø–∏—Å—ã–≤–∞–π –¥–µ–π—Å—Ç–≤–∏—è –≤ —Å–∫–æ–±–∫–∞—Ö, –∑–≤—ë–∑–¥–æ—á–∫–∞—Ö –∏–ª–∏ —Å–ª–æ–≤–∞–º–∏** (–Ω–∞–ø—Ä–∏–º–µ—Ä: '—É–ª—ã–±–∞–µ—Ç—Å—è', '—Å–º–µ—ë—Ç—Å—è'). "
            "–°–ª–µ–¥—É–π —ç—Ç–æ–º—É —Ñ–æ—Ä–º–∞—Ç—É —Å—Ç—Ä–æ–≥–æ!"
}
        ]

    # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∏—Å—Ç–æ—Ä–∏—é
    chat_histories[message.chat.id].append({"role": "user", "content": user_prompt})

    # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É –∏—Å—Ç–æ—Ä–∏–∏
    if len(chat_histories[message.chat.id]) > MAX_HISTORY_LENGTH:
        # –û—Å—Ç–∞–≤–ª—è–µ–º system prompt –∏ –ø–æ—Å–ª–µ–¥–Ω–∏–µ MAX_HISTORY_LENGTH-1 —Å–æ–æ–±—â–µ–Ω–∏–π
        chat_histories[message.chat.id] = [chat_histories[message.chat.id][0]] + chat_histories[message.chat.id][-(MAX_HISTORY_LENGTH-1):]

    headers = {
        "Authorization": f"Bearer {CHUTES_API_TOKEN}",
        "Content-Type": "application/json"
    }
    payload = {
        "model": MODEL,
        "messages": chat_histories[message.chat.id],
        "stream": False,
        "max_tokens": 1024,
        "temperature": 0.7
    }

    try:
        async with httpx.AsyncClient(timeout=60) as client:
            response = await client.post(API_URL, headers=headers, json=payload)
            response.raise_for_status()
            data = response.json()
            ai_text = data["choices"][0]["message"]["content"]
            
            # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –±–æ—Ç–∞ –≤ –∏—Å—Ç–æ—Ä–∏—é
            chat_histories[message.chat.id].append({"role": "assistant", "content": ai_text})
            
            await message.answer(ai_text, parse_mode=ParseMode.MARKDOWN)
    except Exception as e:
        await message.reply(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ –ò–ò: {e}")

async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    import asyncio
    asyncio.run(main())